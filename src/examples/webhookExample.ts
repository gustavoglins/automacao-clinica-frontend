/**
 * Arquivo de exemplo para testar o sistema de webhooks
 * 
 * Este arquivo demonstra como o sistema de webhooks est√° integrado
 * com os servi√ßos da aplica√ß√£o.
 */

import { webhookService, WebhookOperation, WebhookEntity } from '../services/webhookService';

/**
 * Fun√ß√£o de exemplo para testar as notifica√ß√µes de webhook
 */
export async function testWebhookNotifications() {
  console.log('üîî Testando notifica√ß√µes de webhook...');

  try {
    // Teste de notifica√ß√£o para funcion√°rios
    console.log('üìù Testando notifica√ß√£o INSERT para funcion√°rios...');
    await webhookService.notifyEmployees(WebhookOperation.INSERT);

    // Teste de notifica√ß√£o para servi√ßos
    console.log('üìù Testando notifica√ß√£o UPDATE para servi√ßos...');
    await webhookService.notifyServices(WebhookOperation.UPDATE);

    // Teste de notifica√ß√£o para fechamentos
    console.log('üìù Testando notifica√ß√£o DELETE para fechamentos...');
    await webhookService.notifyClosures(WebhookOperation.DELETE);

    // Teste de notifica√ß√£o para endere√ßos da cl√≠nica
    console.log('üìù Testando notifica√ß√£o UPDATE para endere√ßos...');
    await webhookService.notifyClinicAddress(WebhookOperation.UPDATE);

    // Teste de notifica√ß√£o para hor√°rios da cl√≠nica
    console.log('üìù Testando notifica√ß√£o UPDATE para hor√°rios...');
    await webhookService.notifyClinicHours(WebhookOperation.UPDATE);

    console.log('‚úÖ Todos os testes de webhook foram executados!');
  } catch (error) {
    console.error('‚ùå Erro ao testar webhooks:', error);
  }
}

/**
 * Demonstra√ß√£o de como as notifica√ß√µes s√£o chamadas automaticamente
 * nos servi√ßos ap√≥s opera√ß√µes de CRUD
 */
export function webhookIntegrationExample() {
  console.log(`
üîó INTEGRA√á√ÉO DE WEBHOOKS IMPLEMENTADA

Os seguintes endpoints ser√£o notificados automaticamente:

üìç ENDERE√áOS DA CL√çNICA: http://localhost:5678/webhook-test/listener-clinic-address
   - Notificado em: CREATE, UPDATE de endere√ßos

‚è∞ HOR√ÅRIOS DA CL√çNICA: http://localhost:5678/webhook-test/listener-clinic-hours  
   - Notificado em: UPDATE de hor√°rios de funcionamento

üö´ FECHAMENTOS: http://localhost:5678/webhook-test/listener-clinic-closures
   - Notificado em: CREATE, UPDATE, DELETE de fechamentos

üíº SERVI√áOS: http://localhost:5678/webhook-test/listener-services
   - Notificado em: CREATE, UPDATE, DELETE de servi√ßos

üë• FUNCION√ÅRIOS: http://localhost:5678/webhook-test/listener-employees
   - Notificado em: CREATE, UPDATE, DELETE de funcion√°rios

üìã OPERA√á√ïES MONITORADAS:
   - INSERT: Quando um novo registro √© criado
   - UPDATE: Quando um registro existente √© modificado  
   - DELETE: Quando um registro √© removido

üîß CARACTER√çSTICAS:
   - Notifica√ß√µes ass√≠ncronas (n√£o bloqueiam opera√ß√µes principais)
   - Sistema de retry autom√°tico (3 tentativas)
   - Timeout configur√°vel (5 segundos)
   - Logs detalhados para debugging
   - Requisi√ß√µes POST sem conte√∫do no body

üìù EXEMPLO DE USO NOS SERVI√áOS:
   
   // No employeeService.ts - ap√≥s criar funcion√°rio
   await webhookService.notifyEmployees(WebhookOperation.INSERT);
   
   // No servicesService.ts - ap√≥s atualizar servi√ßo  
   await webhookService.notifyServices(WebhookOperation.UPDATE);
   
   // No closureService.ts - ap√≥s deletar fechamento
   await webhookService.notifyClosures(WebhookOperation.DELETE);
  `);
}

// Para executar os testes, descomente a linha abaixo:
// testWebhookNotifications();
